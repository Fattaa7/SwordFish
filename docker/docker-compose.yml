services:
  db:
    build:
      context: ..
      dockerfile: docker/postgresql/Dockerfile
    environment:
      POSTGRES_USER: swordfish_user
      POSTGRES_PASSWORD: swordfish_password
      POSTGRES_DB: swordfish_db
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U swordfish_user -d swordfish_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: swordfish_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    env_file:
      - ../Fish/.env
    volumes:
      - uploads:/tmp
      - ../Fish:/app
      - /app/__pycache__
      - /app/**/__pycache__
      - /app/**/*.pyc
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  celery-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - ../Fish/.env
    volumes:
      - ../Fish:/app
      - uploads:/tmp
    command: celery -A app.celery:celery_app worker --loglevel=info

volumes:
  pgdata:
  redisdata:
  uploads:
